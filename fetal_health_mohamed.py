# -*- coding: utf-8 -*-
"""Fetal_Health_Mohamed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cA3-Y7xMXGu4GG2voygBFlDLLNl0RBkR

# Projek Pertama Machine Learning Terapan - Mohamed

## Latar belakang

Dalam dunia medis, pemantauan kesehatan janin selama kehamilan merupakan aspek penting untuk mencegah komplikasi yang dapat membahayakan ibu maupun janin. Salah satu metode pemantauan yang umum dilakukan adalah melalui kardiotokografi (CTG), yang merekam denyut jantung janin dan kontraksi rahim. Namun, interpretasi data CTG secara manual oleh tenaga medis bisa sangat subjektif dan bervariasi.

Menurut World Health Organization (WHO), sekitar 2,4 juta bayi meninggal pada bulan pertama kehidupan setiap tahunnya, banyak di antaranya dapat dicegah dengan pemantauan dan penanganan kehamilan yang lebih baik \[1]. Model klasifikasi otomatis berbasis machine learning dapat membantu mengidentifikasi kondisi janin sebagai "normal", "suspect", atau "pathological", sehingga dokter dapat mengambil tindakan yang tepat lebih cepat.

Oleh karena itu, untuk mengurangi resiko dari meninggalnya bayi , maka diperlukan penerapan machine learning dalam klasifikasi kesehatan janin dapat membantu meningkatkan akurasi diagnosis dan efisiensi kerja dokter.

merujuk pada penelitian yang serupa dilakukan oleh (Mehbodniya, 2022) dan (Salini , 2024), ditemukan bahwa penerapan machine learning dapat memberikan prediksi dengan akurasi yang cukup menjanjikan  yang diukur berdasarkan metrik akurasi , presisi, skor f1, dan recall. yang menandakan bahwa penggunaan Machine learning dapat meningkatkan akurasi dari diagnosia kondisi kesehatan janin berdasarkan hasil CTG.
"""

import kagglehub
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report ,f1_score , precision_score, recall_score
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

"""# Data Loading

Dataset yang digunakan merupakan dataset yang berasal dari kaggle, yang diterbitkan oleh andrewmvd dengan judul fetal health classification. Dataset ini memiliki 2126 kolom dengan total 22 fitur yang terdiri dari 21 fitur independen dan 1 fitur dependen atau label.
"""

# Download latest version
path = kagglehub.dataset_download("andrewmvd/fetal-health-classification")

print("Path to dataset files:", path)

DATA_DIR = f'{path}/{os.listdir(path)[0]}'
df = pd.read_csv(DATA_DIR)

"""# Exploratory Data Analysis (EDA)

## Melihat kolom dan tipe data dari kolom pada dataset
"""

df.info()

"""## Melihat 5 data teratas pada Dataset"""

df.head()

"""# Melihat statistik"""

df.describe()

"""## Membuat visualisasi boxplot untuk mengidentifikasi Outlier pada tiap kolom dalam dataset"""

def show_boxplots(df):
  rows = int(np.ceil(np.sqrt(len(df.columns))))
  cols = int(np.ceil(len(df.columns) / rows))
  print(rows,cols)
  fig, ax = plt.subplots(rows, cols, figsize=(10*cols, 10*rows))
  ax = ax.flatten()
  for (idx , feature) in enumerate(df.columns):
    sns.boxplot(df[feature], ax=ax[idx])
    ax[idx].set_title(feature)

  for j in range(idx + 1, len(ax)):
      fig.delaxes(ax[j])
  plt.tight_layout()
  plt.show()

show_boxplots(df)

"""## Mengecek nilai kosong di dalam setiap kolom pada dataset"""

df.isna().sum()

"""## Mengecek nilai duplikat pada setiap kolom di dalam dataset"""

df.duplicated().sum()

"""## Menghapus nilai duplikat dari dalam dataset"""

df.drop_duplicates(inplace=True)

"""## Membuat Pie Chart untuk visualisasi distribusi kelas atau label pada dataset"""

plt.pie(df['fetal_health'].value_counts(), labels = df['fetal_health'].value_counts().index, autopct='%1.1f%%')
plt.title('Distribusi label fetal_health')
plt.show()

"""## Membuat Bar Chart untuk visualisasi distribusi kelas atau label pada dataset"""

sns.countplot(x='fetal_health', data=df)
plt.title('Distribusi label fetal_health')
plt.show()

"""## Membuat Heat map untuk visualisasi korelasi antar kolom dalam dataset"""

corr = df.corr()
plt.figure(figsize=(15,10))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""#Data Preparation

## Memisahkan antara variabel independen dan variabel dependen serta melakukan splitting data dan augmentasi data untuk menyeimbangkan data latih.
"""

X = df.drop(['fetal_health'],axis = 1)
y = df['fetal_health']

X_train , X_test , y_train , y_test = train_test_split(X,y , test_size = 0.2 , stratify=y , random_state = 42)

print(X_train.shape , X_test.shape , y_train.shape , y_test.shape)
Scaler = MinMaxScaler()
X_train = Scaler.fit_transform(X_train)
X_test = Scaler.transform(X_test)

smote = SMOTE()
X_train_resampled , y_train_resampled = smote.fit_resample(X_train , y_train)

print(X_train_resampled.shape , X_test.shape , y_train_resampled.shape , y_test.shape)

"""# Modeling & Evaluasi

## Membuat fungsi untuk evaluasi performa dari modedl
"""

def evaluate_model(model, X_train, y_train, X_test, y_test):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("F1 Score:", f1_score(y_test, y_pred, average='weighted'))
    print("Precision Score :" , precision_score(y_test, y_pred, average='weighted'))
    print("Recall Score :" , recall_score(y_test, y_pred, average='weighted'))
    print("-"*50)
    sns.heatmap(confusion_matrix(y_test , y_pred) , annot = True ,cmap='Blues')
    plt.title('Confusion Matrix')
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.show()
    print("-"*50)
    print("Classification Report:\n", classification_report(y_test, y_pred))

"""## Melakukan proses training pada model KNN, RF, SVM, dan GB menggunakan data hasil splitting."""

model_knn = KNeighborsClassifier()
model_rf = RandomForestClassifier(n_estimators=300,max_depth=2)
model_svm = SVC()
model_gb = GradientBoostingClassifier(learning_rate = 0.1)

"""## Menampilkan evaluasi dari hasil latih pada masing-masing model"""

print("KNN")
evaluate_model(model_knn, X_train_resampled , y_train_resampled, X_test, y_test)
print("Random Forest")
evaluate_model(model_rf, X_train_resampled , y_train_resampled, X_test, y_test)
print("SVM")
evaluate_model(model_svm, X_train_resampled , y_train_resampled, X_test, y_test)
print("Gradient Boosting")
evaluate_model(model_gb,X_train_resampled , y_train_resampled, X_test, y_test)